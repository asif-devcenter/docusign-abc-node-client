/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValidationErrors from './ValidationErrors';
import WorkflowDefinition from './WorkflowDefinition';
import WorkflowMetadataStatus from './WorkflowMetadataStatus';

/**
 * The WorkflowDefinitionWithId model module.
 * @module model/WorkflowDefinitionWithId
 * @version 1.0.0
 */
class WorkflowDefinitionWithId {
    /**
     * Constructs a new <code>WorkflowDefinitionWithId</code>.
     * A DS workflow definition with metadata.
     * @alias module:model/WorkflowDefinitionWithId
     * @param id {String} 
     */
    constructor(id) { 
        
        WorkflowDefinitionWithId.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>WorkflowDefinitionWithId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowDefinitionWithId} obj Optional instance to populate.
     * @return {module:model/WorkflowDefinitionWithId} The populated <code>WorkflowDefinitionWithId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowDefinitionWithId();

            if (data.hasOwnProperty('workflowDefinition')) {
                obj['workflowDefinition'] = WorkflowDefinition.constructFromObject(data['workflowDefinition']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdatedDate')) {
                obj['lastUpdatedDate'] = ApiClient.convertToType(data['lastUpdatedDate'], 'Date');
            }
            if (data.hasOwnProperty('validationErrors')) {
                obj['validationErrors'] = ApiClient.convertToType(data['validationErrors'], [ValidationErrors]);
            }
            if (data.hasOwnProperty('triggerUrl')) {
                obj['triggerUrl'] = ApiClient.convertToType(data['triggerUrl'], 'String');
            }
            if (data.hasOwnProperty('isDraft')) {
                obj['isDraft'] = ApiClient.convertToType(data['isDraft'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = WorkflowMetadataStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('lastDeployedId')) {
                obj['lastDeployedId'] = ApiClient.convertToType(data['lastDeployedId'], 'String');
            }
            if (data.hasOwnProperty('lastDeployedVersion')) {
                obj['lastDeployedVersion'] = ApiClient.convertToType(data['lastDeployedVersion'], 'String');
            }
            if (data.hasOwnProperty('lastDeployedWorkflowDefinition')) {
                obj['lastDeployedWorkflowDefinition'] = WorkflowDefinition.constructFromObject(data['lastDeployedWorkflowDefinition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowDefinitionWithId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowDefinitionWithId</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowDefinitionWithId.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `workflowDefinition`
        if (data['workflowDefinition']) { // data not null
          WorkflowDefinition.validateJSON(data['workflowDefinition']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['validationErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationErrors'])) {
                throw new Error("Expected the field `validationErrors` to be an array in the JSON data but got " + data['validationErrors']);
            }
            // validate the optional field `validationErrors` (array)
            for (const item of data['validationErrors']) {
                ValidationErrors.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['triggerUrl'] && !(typeof data['triggerUrl'] === 'string' || data['triggerUrl'] instanceof String)) {
            throw new Error("Expected the field `triggerUrl` to be a primitive type in the JSON string but got " + data['triggerUrl']);
        }
        // ensure the json data is a string
        if (data['lastDeployedId'] && !(typeof data['lastDeployedId'] === 'string' || data['lastDeployedId'] instanceof String)) {
            throw new Error("Expected the field `lastDeployedId` to be a primitive type in the JSON string but got " + data['lastDeployedId']);
        }
        // ensure the json data is a string
        if (data['lastDeployedVersion'] && !(typeof data['lastDeployedVersion'] === 'string' || data['lastDeployedVersion'] instanceof String)) {
            throw new Error("Expected the field `lastDeployedVersion` to be a primitive type in the JSON string but got " + data['lastDeployedVersion']);
        }
        // validate the optional field `lastDeployedWorkflowDefinition`
        if (data['lastDeployedWorkflowDefinition']) { // data not null
          WorkflowDefinition.validateJSON(data['lastDeployedWorkflowDefinition']);
        }

        return true;
    }


}

WorkflowDefinitionWithId.RequiredProperties = ["id"];

/**
 * @member {module:model/WorkflowDefinition} workflowDefinition
 */
WorkflowDefinitionWithId.prototype['workflowDefinition'] = undefined;

/**
 * @member {String} id
 */
WorkflowDefinitionWithId.prototype['id'] = undefined;

/**
 * @member {String} accountId
 */
WorkflowDefinitionWithId.prototype['accountId'] = undefined;

/**
 * The date the workflow was created
 * @member {Date} createdDate
 */
WorkflowDefinitionWithId.prototype['createdDate'] = undefined;

/**
 * The date the workflow was last updated
 * @member {Date} lastUpdatedDate
 */
WorkflowDefinitionWithId.prototype['lastUpdatedDate'] = undefined;

/**
 * @member {Array.<module:model/ValidationErrors>} validationErrors
 */
WorkflowDefinitionWithId.prototype['validationErrors'] = undefined;

/**
 * @member {String} triggerUrl
 */
WorkflowDefinitionWithId.prototype['triggerUrl'] = undefined;

/**
 * @member {Boolean} isDraft
 */
WorkflowDefinitionWithId.prototype['isDraft'] = undefined;

/**
 * @member {module:model/WorkflowMetadataStatus} status
 */
WorkflowDefinitionWithId.prototype['status'] = undefined;

/**
 * @member {String} lastDeployedId
 */
WorkflowDefinitionWithId.prototype['lastDeployedId'] = undefined;

/**
 * @member {String} lastDeployedVersion
 */
WorkflowDefinitionWithId.prototype['lastDeployedVersion'] = undefined;

/**
 * @member {module:model/WorkflowDefinition} lastDeployedWorkflowDefinition
 */
WorkflowDefinitionWithId.prototype['lastDeployedWorkflowDefinition'] = undefined;






export default WorkflowDefinitionWithId;

