/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ESignTabs from './ESignTabs';

/**
 * The ESignTabsRecord model module.
 * @module model/ESignTabsRecord
 * @version 1.0.0
 */
class ESignTabsRecord {
    /**
     * Constructs a new <code>ESignTabsRecord</code>.
     * @alias module:model/ESignTabsRecord
     */
    constructor() { 
        
        ESignTabsRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ESignTabsRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ESignTabsRecord} obj Optional instance to populate.
     * @return {module:model/ESignTabsRecord} The populated <code>ESignTabsRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ESignTabsRecord();

            if (data.hasOwnProperty('signHereTabs')) {
                obj['signHereTabs'] = ApiClient.convertToType(data['signHereTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('dateSignedTabs')) {
                obj['dateSignedTabs'] = ApiClient.convertToType(data['dateSignedTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('textTabs')) {
                obj['textTabs'] = ApiClient.convertToType(data['textTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('fullNameTabs')) {
                obj['fullNameTabs'] = ApiClient.convertToType(data['fullNameTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('emailAddressTabs')) {
                obj['emailAddressTabs'] = ApiClient.convertToType(data['emailAddressTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('firstNameTabs')) {
                obj['firstNameTabs'] = ApiClient.convertToType(data['firstNameTabs'], [ESignTabs]);
            }
            if (data.hasOwnProperty('lastNameTabs')) {
                obj['lastNameTabs'] = ApiClient.convertToType(data['lastNameTabs'], [ESignTabs]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ESignTabsRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ESignTabsRecord</code>.
     */
    static validateJSON(data) {
        if (data['signHereTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signHereTabs'])) {
                throw new Error("Expected the field `signHereTabs` to be an array in the JSON data but got " + data['signHereTabs']);
            }
            // validate the optional field `signHereTabs` (array)
            for (const item of data['signHereTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['dateSignedTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dateSignedTabs'])) {
                throw new Error("Expected the field `dateSignedTabs` to be an array in the JSON data but got " + data['dateSignedTabs']);
            }
            // validate the optional field `dateSignedTabs` (array)
            for (const item of data['dateSignedTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['textTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textTabs'])) {
                throw new Error("Expected the field `textTabs` to be an array in the JSON data but got " + data['textTabs']);
            }
            // validate the optional field `textTabs` (array)
            for (const item of data['textTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['fullNameTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fullNameTabs'])) {
                throw new Error("Expected the field `fullNameTabs` to be an array in the JSON data but got " + data['fullNameTabs']);
            }
            // validate the optional field `fullNameTabs` (array)
            for (const item of data['fullNameTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['emailAddressTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emailAddressTabs'])) {
                throw new Error("Expected the field `emailAddressTabs` to be an array in the JSON data but got " + data['emailAddressTabs']);
            }
            // validate the optional field `emailAddressTabs` (array)
            for (const item of data['emailAddressTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['firstNameTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['firstNameTabs'])) {
                throw new Error("Expected the field `firstNameTabs` to be an array in the JSON data but got " + data['firstNameTabs']);
            }
            // validate the optional field `firstNameTabs` (array)
            for (const item of data['firstNameTabs']) {
                ESignTabs.validateJSON(item);
            };
        }
        if (data['lastNameTabs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lastNameTabs'])) {
                throw new Error("Expected the field `lastNameTabs` to be an array in the JSON data but got " + data['lastNameTabs']);
            }
            // validate the optional field `lastNameTabs` (array)
            for (const item of data['lastNameTabs']) {
                ESignTabs.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ESignTabs>} signHereTabs
 */
ESignTabsRecord.prototype['signHereTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} dateSignedTabs
 */
ESignTabsRecord.prototype['dateSignedTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} textTabs
 */
ESignTabsRecord.prototype['textTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} fullNameTabs
 */
ESignTabsRecord.prototype['fullNameTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} emailAddressTabs
 */
ESignTabsRecord.prototype['emailAddressTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} firstNameTabs
 */
ESignTabsRecord.prototype['firstNameTabs'] = undefined;

/**
 * @member {Array.<module:model/ESignTabs>} lastNameTabs
 */
ESignTabsRecord.prototype['lastNameTabs'] = undefined;






export default ESignTabsRecord;

