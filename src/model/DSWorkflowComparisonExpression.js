/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSWorkflowComparisonExpressionLeftOperand from './DSWorkflowComparisonExpressionLeftOperand';
import DSWorkflowComparisonOperatorTypes from './DSWorkflowComparisonOperatorTypes';
import DSWorkflowExpressionTypesComparisonExpression from './DSWorkflowExpressionTypesComparisonExpression';

/**
 * The DSWorkflowComparisonExpression model module.
 * @module model/DSWorkflowComparisonExpression
 * @version 1.0.0
 */
class DSWorkflowComparisonExpression {
    /**
     * Constructs a new <code>DSWorkflowComparisonExpression</code>.
     * @alias module:model/DSWorkflowComparisonExpression
     * @param type {module:model/DSWorkflowExpressionTypesComparisonExpression} 
     * @param comparisonOperator {module:model/DSWorkflowComparisonOperatorTypes} 
     * @param leftOperand {module:model/DSWorkflowComparisonExpressionLeftOperand} 
     * @param rightOperand {module:model/DSWorkflowComparisonExpressionLeftOperand} 
     */
    constructor(type, comparisonOperator, leftOperand, rightOperand) { 
        
        DSWorkflowComparisonExpression.initialize(this, type, comparisonOperator, leftOperand, rightOperand);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, comparisonOperator, leftOperand, rightOperand) { 
        obj['type'] = type;
        obj['comparisonOperator'] = comparisonOperator;
        obj['leftOperand'] = leftOperand;
        obj['rightOperand'] = rightOperand;
    }

    /**
     * Constructs a <code>DSWorkflowComparisonExpression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DSWorkflowComparisonExpression} obj Optional instance to populate.
     * @return {module:model/DSWorkflowComparisonExpression} The populated <code>DSWorkflowComparisonExpression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DSWorkflowComparisonExpression();

            if (data.hasOwnProperty('type')) {
                obj['type'] = DSWorkflowExpressionTypesComparisonExpression.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('comparisonOperator')) {
                obj['comparisonOperator'] = DSWorkflowComparisonOperatorTypes.constructFromObject(data['comparisonOperator']);
            }
            if (data.hasOwnProperty('leftOperand')) {
                obj['leftOperand'] = DSWorkflowComparisonExpressionLeftOperand.constructFromObject(data['leftOperand']);
            }
            if (data.hasOwnProperty('rightOperand')) {
                obj['rightOperand'] = DSWorkflowComparisonExpressionLeftOperand.constructFromObject(data['rightOperand']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DSWorkflowComparisonExpression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DSWorkflowComparisonExpression</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DSWorkflowComparisonExpression.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `leftOperand`
        if (data['leftOperand']) { // data not null
          DSWorkflowComparisonExpressionLeftOperand.validateJSON(data['leftOperand']);
        }
        // validate the optional field `rightOperand`
        if (data['rightOperand']) { // data not null
          DSWorkflowComparisonExpressionLeftOperand.validateJSON(data['rightOperand']);
        }

        return true;
    }


}

DSWorkflowComparisonExpression.RequiredProperties = ["type", "comparisonOperator", "leftOperand", "rightOperand"];

/**
 * @member {module:model/DSWorkflowExpressionTypesComparisonExpression} type
 */
DSWorkflowComparisonExpression.prototype['type'] = undefined;

/**
 * @member {module:model/DSWorkflowComparisonOperatorTypes} comparisonOperator
 */
DSWorkflowComparisonExpression.prototype['comparisonOperator'] = undefined;

/**
 * @member {module:model/DSWorkflowComparisonExpressionLeftOperand} leftOperand
 */
DSWorkflowComparisonExpression.prototype['leftOperand'] = undefined;

/**
 * @member {module:model/DSWorkflowComparisonExpressionLeftOperand} rightOperand
 */
DSWorkflowComparisonExpression.prototype['rightOperand'] = undefined;






export default DSWorkflowComparisonExpression;

