/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSWorkflowDocGenDocOutputFormat from './DSWorkflowDocGenDocOutputFormat';
import DSWorkflowVariable from './DSWorkflowVariable';
import ESignDocumentTypesFromPreviousStep from './ESignDocumentTypesFromPreviousStep';
import StringOrVariableOrTransformation from './StringOrVariableOrTransformation';

/**
 * The ESignDocumentFromPreviousStep model module.
 * @module model/ESignDocumentFromPreviousStep
 * @version 1.0.0
 */
class ESignDocumentFromPreviousStep {
    /**
     * Constructs a new <code>ESignDocumentFromPreviousStep</code>.
     * @alias module:model/ESignDocumentFromPreviousStep
     * @param type {module:model/ESignDocumentTypesFromPreviousStep} 
     * @param documentFromPreviousStep {module:model/DSWorkflowVariable} 
     * @param fileExtension {module:model/DSWorkflowDocGenDocOutputFormat} 
     * @param name {module:model/StringOrVariableOrTransformation} 
     */
    constructor(type, documentFromPreviousStep, fileExtension, name) { 
        
        ESignDocumentFromPreviousStep.initialize(this, type, documentFromPreviousStep, fileExtension, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, documentFromPreviousStep, fileExtension, name) { 
        obj['type'] = type;
        obj['documentFromPreviousStep'] = documentFromPreviousStep;
        obj['fileExtension'] = fileExtension;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ESignDocumentFromPreviousStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ESignDocumentFromPreviousStep} obj Optional instance to populate.
     * @return {module:model/ESignDocumentFromPreviousStep} The populated <code>ESignDocumentFromPreviousStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ESignDocumentFromPreviousStep();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ESignDocumentTypesFromPreviousStep.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('documentFromPreviousStep')) {
                obj['documentFromPreviousStep'] = DSWorkflowVariable.constructFromObject(data['documentFromPreviousStep']);
            }
            if (data.hasOwnProperty('fileExtension')) {
                obj['fileExtension'] = DSWorkflowDocGenDocOutputFormat.constructFromObject(data['fileExtension']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = StringOrVariableOrTransformation.constructFromObject(data['name']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ESignDocumentFromPreviousStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ESignDocumentFromPreviousStep</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ESignDocumentFromPreviousStep.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `documentFromPreviousStep`
        if (data['documentFromPreviousStep']) { // data not null
          DSWorkflowVariable.validateJSON(data['documentFromPreviousStep']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['name']);
        }

        return true;
    }


}

ESignDocumentFromPreviousStep.RequiredProperties = ["type", "documentFromPreviousStep", "fileExtension", "name"];

/**
 * @member {module:model/ESignDocumentTypesFromPreviousStep} type
 */
ESignDocumentFromPreviousStep.prototype['type'] = undefined;

/**
 * @member {module:model/DSWorkflowVariable} documentFromPreviousStep
 */
ESignDocumentFromPreviousStep.prototype['documentFromPreviousStep'] = undefined;

/**
 * @member {module:model/DSWorkflowDocGenDocOutputFormat} fileExtension
 */
ESignDocumentFromPreviousStep.prototype['fileExtension'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} name
 */
ESignDocumentFromPreviousStep.prototype['name'] = undefined;






export default ESignDocumentFromPreviousStep;

