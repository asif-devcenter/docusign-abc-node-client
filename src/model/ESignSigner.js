/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ESignTabsRecord from './ESignTabsRecord';
import StringOrVariableOrTransformation from './StringOrVariableOrTransformation';

/**
 * The ESignSigner model module.
 * @module model/ESignSigner
 * @version 1.0.0
 */
class ESignSigner {
    /**
     * Constructs a new <code>ESignSigner</code>.
     * @alias module:model/ESignSigner
     * @param userName {module:model/StringOrVariableOrTransformation} 
     * @param email {module:model/StringOrVariableOrTransformation} 
     * @param routingOrder {String} 
     * @param note {module:model/StringOrVariableOrTransformation} 
     * @param tabs {module:model/ESignTabsRecord} 
     */
    constructor(userName, email, routingOrder, note, tabs) { 
        
        ESignSigner.initialize(this, userName, email, routingOrder, note, tabs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userName, email, routingOrder, note, tabs) { 
        obj['userName'] = userName;
        obj['email'] = email;
        obj['routingOrder'] = routingOrder;
        obj['note'] = note;
        obj['tabs'] = tabs;
    }

    /**
     * Constructs a <code>ESignSigner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ESignSigner} obj Optional instance to populate.
     * @return {module:model/ESignSigner} The populated <code>ESignSigner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ESignSigner();

            if (data.hasOwnProperty('userName')) {
                obj['userName'] = StringOrVariableOrTransformation.constructFromObject(data['userName']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = StringOrVariableOrTransformation.constructFromObject(data['email']);
            }
            if (data.hasOwnProperty('routingOrder')) {
                obj['routingOrder'] = ApiClient.convertToType(data['routingOrder'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = StringOrVariableOrTransformation.constructFromObject(data['note']);
            }
            if (data.hasOwnProperty('tabs')) {
                obj['tabs'] = ESignTabsRecord.constructFromObject(data['tabs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ESignSigner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ESignSigner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ESignSigner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `userName`
        if (data['userName']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['userName']);
        }
        // validate the optional field `email`
        if (data['email']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['email']);
        }
        // ensure the json data is a string
        if (data['routingOrder'] && !(typeof data['routingOrder'] === 'string' || data['routingOrder'] instanceof String)) {
            throw new Error("Expected the field `routingOrder` to be a primitive type in the JSON string but got " + data['routingOrder']);
        }
        // validate the optional field `note`
        if (data['note']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['note']);
        }
        // validate the optional field `tabs`
        if (data['tabs']) { // data not null
          ESignTabsRecord.validateJSON(data['tabs']);
        }

        return true;
    }


}

ESignSigner.RequiredProperties = ["userName", "email", "routingOrder", "note", "tabs"];

/**
 * @member {module:model/StringOrVariableOrTransformation} userName
 */
ESignSigner.prototype['userName'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} email
 */
ESignSigner.prototype['email'] = undefined;

/**
 * @member {String} routingOrder
 */
ESignSigner.prototype['routingOrder'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} note
 */
ESignSigner.prototype['note'] = undefined;

/**
 * @member {module:model/ESignTabsRecord} tabs
 */
ESignSigner.prototype['tabs'] = undefined;






export default ESignSigner;

