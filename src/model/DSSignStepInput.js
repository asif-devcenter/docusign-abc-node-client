/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ESignDocuments from './ESignDocuments';
import ESignSigner from './ESignSigner';
import StringOrVariableOrTransformation from './StringOrVariableOrTransformation';

/**
 * The DSSignStepInput model module.
 * @module model/DSSignStepInput
 * @version 1.0.0
 */
class DSSignStepInput {
    /**
     * Constructs a new <code>DSSignStepInput</code>.
     * @alias module:model/DSSignStepInput
     * @param signers {Array.<module:model/ESignSigner>} 
     * @param documents {Array.<module:model/ESignDocuments>} 
     * @param isEmbeddedSign {Boolean} 
     */
    constructor(signers, documents, isEmbeddedSign) { 
        
        DSSignStepInput.initialize(this, signers, documents, isEmbeddedSign);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, signers, documents, isEmbeddedSign) { 
        obj['signers'] = signers;
        obj['documents'] = documents;
        obj['isEmbeddedSign'] = isEmbeddedSign;
    }

    /**
     * Constructs a <code>DSSignStepInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DSSignStepInput} obj Optional instance to populate.
     * @return {module:model/DSSignStepInput} The populated <code>DSSignStepInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DSSignStepInput();

            if (data.hasOwnProperty('emailBlurb')) {
                obj['emailBlurb'] = StringOrVariableOrTransformation.constructFromObject(data['emailBlurb']);
            }
            if (data.hasOwnProperty('emailSubject')) {
                obj['emailSubject'] = StringOrVariableOrTransformation.constructFromObject(data['emailSubject']);
            }
            if (data.hasOwnProperty('signers')) {
                obj['signers'] = ApiClient.convertToType(data['signers'], [ESignSigner]);
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [ESignDocuments]);
            }
            if (data.hasOwnProperty('isEmbeddedSign')) {
                obj['isEmbeddedSign'] = ApiClient.convertToType(data['isEmbeddedSign'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DSSignStepInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DSSignStepInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DSSignStepInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `emailBlurb`
        if (data['emailBlurb']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['emailBlurb']);
        }
        // validate the optional field `emailSubject`
        if (data['emailSubject']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['emailSubject']);
        }
        if (data['signers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signers'])) {
                throw new Error("Expected the field `signers` to be an array in the JSON data but got " + data['signers']);
            }
            // validate the optional field `signers` (array)
            for (const item of data['signers']) {
                ESignSigner.validateJSON(item);
            };
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                ESignDocuments.validateJSON(item);
            };
        }

        return true;
    }


}

DSSignStepInput.RequiredProperties = ["signers", "documents", "isEmbeddedSign"];

/**
 * @member {module:model/StringOrVariableOrTransformation} emailBlurb
 */
DSSignStepInput.prototype['emailBlurb'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} emailSubject
 */
DSSignStepInput.prototype['emailSubject'] = undefined;

/**
 * @member {Array.<module:model/ESignSigner>} signers
 */
DSSignStepInput.prototype['signers'] = undefined;

/**
 * @member {Array.<module:model/ESignDocuments>} documents
 */
DSSignStepInput.prototype['documents'] = undefined;

/**
 * @member {Boolean} isEmbeddedSign
 */
DSSignStepInput.prototype['isEmbeddedSign'] = undefined;






export default DSSignStepInput;

