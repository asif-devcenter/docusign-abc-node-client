/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSIdvStepInput from './DSIdvStepInput';
import DSWorkflowStepTypesDSIdv from './DSWorkflowStepTypesDSIdv';
import StringOrVariableOrTransformation from './StringOrVariableOrTransformation';

/**
 * The DSIdvStep model module.
 * @module model/DSIdvStep
 * @version 1.0.0
 */
class DSIdvStep {
    /**
     * Constructs a new <code>DSIdvStep</code>.
     * @alias module:model/DSIdvStep
     * @param name {String} 
     * @param id {String} 
     * @param type {module:model/DSWorkflowStepTypesDSIdv} 
     * @param config {Object} 
     * @param input {module:model/DSIdvStepInput} 
     * @param output {Object.<String, module:model/StringOrVariableOrTransformation>} A Record of strings to Strings, Variables, or Transformation Expressions
     */
    constructor(name, id, type, config, input, output) { 
        
        DSIdvStep.initialize(this, name, id, type, config, input, output);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, id, type, config, input, output) { 
        obj['name'] = name;
        obj['id'] = id;
        obj['type'] = type;
        obj['config'] = config;
        obj['input'] = input;
        obj['output'] = output;
    }

    /**
     * Constructs a <code>DSIdvStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DSIdvStep} obj Optional instance to populate.
     * @return {module:model/DSIdvStep} The populated <code>DSIdvStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DSIdvStep();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = DSWorkflowStepTypesDSIdv.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], Object);
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = DSIdvStepInput.constructFromObject(data['input']);
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = ApiClient.convertToType(data['output'], {'String': StringOrVariableOrTransformation});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DSIdvStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DSIdvStep</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DSIdvStep.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `input`
        if (data['input']) { // data not null
          DSIdvStepInput.validateJSON(data['input']);
        }

        return true;
    }


}

DSIdvStep.RequiredProperties = ["name", "id", "type", "config", "input", "output"];

/**
 * @member {String} name
 */
DSIdvStep.prototype['name'] = undefined;

/**
 * @member {String} id
 */
DSIdvStep.prototype['id'] = undefined;

/**
 * @member {module:model/DSWorkflowStepTypesDSIdv} type
 */
DSIdvStep.prototype['type'] = undefined;

/**
 * @member {Object} config
 */
DSIdvStep.prototype['config'] = undefined;

/**
 * @member {module:model/DSIdvStepInput} input
 */
DSIdvStep.prototype['input'] = undefined;

/**
 * A Record of strings to Strings, Variables, or Transformation Expressions
 * @member {Object.<String, module:model/StringOrVariableOrTransformation>} output
 */
DSIdvStep.prototype['output'] = undefined;






export default DSIdvStep;

