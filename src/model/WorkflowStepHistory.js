/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowStepError from './WorkflowStepError';
import WorkflowStepHistoryState from './WorkflowStepHistoryState';

/**
 * The WorkflowStepHistory model module.
 * @module model/WorkflowStepHistory
 * @version 1.0.0
 */
class WorkflowStepHistory {
    /**
     * Constructs a new <code>WorkflowStepHistory</code>.
     * Details (history) of a Workflow Instance Step
     * @alias module:model/WorkflowStepHistory
     * @param dacId {String} 
     * @param stepName {String} Name of the workflow step (DS Scope)
     * @param stepState {module:model/WorkflowStepHistoryState} 
     * @param userId {String} Participant User ID
     */
    constructor(dacId, stepName, stepState, userId) { 
        
        WorkflowStepHistory.initialize(this, dacId, stepName, stepState, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dacId, stepName, stepState, userId) { 
        obj['dacId'] = dacId;
        obj['stepName'] = stepName;
        obj['stepState'] = stepState;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>WorkflowStepHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowStepHistory} obj Optional instance to populate.
     * @return {module:model/WorkflowStepHistory} The populated <code>WorkflowStepHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowStepHistory();

            if (data.hasOwnProperty('dacId')) {
                obj['dacId'] = ApiClient.convertToType(data['dacId'], 'String');
            }
            if (data.hasOwnProperty('stepName')) {
                obj['stepName'] = ApiClient.convertToType(data['stepName'], 'String');
            }
            if (data.hasOwnProperty('dsStepId')) {
                obj['dsStepId'] = ApiClient.convertToType(data['dsStepId'], 'String');
            }
            if (data.hasOwnProperty('stepId')) {
                obj['stepId'] = ApiClient.convertToType(data['stepId'], 'String');
            }
            if (data.hasOwnProperty('stepState')) {
                obj['stepState'] = WorkflowStepHistoryState.constructFromObject(data['stepState']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = WorkflowStepError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('outputModuleProperties')) {
                obj['outputModuleProperties'] = ApiClient.convertToType(data['outputModuleProperties'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowStepHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowStepHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowStepHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dacId'] && !(typeof data['dacId'] === 'string' || data['dacId'] instanceof String)) {
            throw new Error("Expected the field `dacId` to be a primitive type in the JSON string but got " + data['dacId']);
        }
        // ensure the json data is a string
        if (data['stepName'] && !(typeof data['stepName'] === 'string' || data['stepName'] instanceof String)) {
            throw new Error("Expected the field `stepName` to be a primitive type in the JSON string but got " + data['stepName']);
        }
        // ensure the json data is a string
        if (data['dsStepId'] && !(typeof data['dsStepId'] === 'string' || data['dsStepId'] instanceof String)) {
            throw new Error("Expected the field `dsStepId` to be a primitive type in the JSON string but got " + data['dsStepId']);
        }
        // ensure the json data is a string
        if (data['stepId'] && !(typeof data['stepId'] === 'string' || data['stepId'] instanceof String)) {
            throw new Error("Expected the field `stepId` to be a primitive type in the JSON string but got " + data['stepId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          WorkflowStepError.validateJSON(data['error']);
        }

        return true;
    }


}

WorkflowStepHistory.RequiredProperties = ["dacId", "stepName", "stepState", "userId"];

/**
 * @member {String} dacId
 */
WorkflowStepHistory.prototype['dacId'] = undefined;

/**
 * Name of the workflow step (DS Scope)
 * @member {String} stepName
 */
WorkflowStepHistory.prototype['stepName'] = undefined;

/**
 * DS Step Id <TODO>
 * @member {String} dsStepId
 */
WorkflowStepHistory.prototype['dsStepId'] = undefined;

/**
 * @member {String} stepId
 */
WorkflowStepHistory.prototype['stepId'] = undefined;

/**
 * @member {module:model/WorkflowStepHistoryState} stepState
 */
WorkflowStepHistory.prototype['stepState'] = undefined;

/**
 * @member {Date} startDate
 */
WorkflowStepHistory.prototype['startDate'] = undefined;

/**
 * @member {Date} endDate
 */
WorkflowStepHistory.prototype['endDate'] = undefined;

/**
 * Participant User ID
 * @member {String} userId
 */
WorkflowStepHistory.prototype['userId'] = undefined;

/**
 * @member {String} accountId
 */
WorkflowStepHistory.prototype['accountId'] = undefined;

/**
 * @member {module:model/WorkflowStepError} error
 */
WorkflowStepHistory.prototype['error'] = undefined;

/**
 * @member {Object.<String, Object>} outputModuleProperties
 */
WorkflowStepHistory.prototype['outputModuleProperties'] = undefined;






export default WorkflowStepHistory;

