/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartedByInstance model module.
 * @module model/StartedByInstance
 * @version 1.0.0
 */
class StartedByInstance {
    /**
     * Constructs a new <code>StartedByInstance</code>.
     * The started by information for a workflow instance
     * @alias module:model/StartedByInstance
     */
    constructor() { 
        
        StartedByInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartedByInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartedByInstance} obj Optional instance to populate.
     * @return {module:model/StartedByInstance} The populated <code>StartedByInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartedByInstance();

            if (data.hasOwnProperty('startedByName')) {
                obj['startedByName'] = ApiClient.convertToType(data['startedByName'], 'String');
            }
            if (data.hasOwnProperty('startedById')) {
                obj['startedById'] = ApiClient.convertToType(data['startedById'], 'String');
            }
            if (data.hasOwnProperty('startedByType')) {
                obj['startedByType'] = ApiClient.convertToType(data['startedByType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartedByInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartedByInstance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['startedByName'] && !(typeof data['startedByName'] === 'string' || data['startedByName'] instanceof String)) {
            throw new Error("Expected the field `startedByName` to be a primitive type in the JSON string but got " + data['startedByName']);
        }
        // ensure the json data is a string
        if (data['startedById'] && !(typeof data['startedById'] === 'string' || data['startedById'] instanceof String)) {
            throw new Error("Expected the field `startedById` to be a primitive type in the JSON string but got " + data['startedById']);
        }
        // ensure the json data is a string
        if (data['startedByType'] && !(typeof data['startedByType'] === 'string' || data['startedByType'] instanceof String)) {
            throw new Error("Expected the field `startedByType` to be a primitive type in the JSON string but got " + data['startedByType']);
        }

        return true;
    }


}



/**
 * The user name of the person who starts a workflow Instance
 * @member {String} startedByName
 */
StartedByInstance.prototype['startedByName'] = undefined;

/**
 * @member {String} startedById
 */
StartedByInstance.prototype['startedById'] = undefined;

/**
 * @member {module:model/StartedByInstance.StartedByTypeEnum} startedByType
 */
StartedByInstance.prototype['startedByType'] = undefined;





/**
 * Allowed values for the <code>startedByType</code> property.
 * @enum {String}
 * @readonly
 */
StartedByInstance['StartedByTypeEnum'] = {

    /**
     * value: "Anonymous"
     * @const
     */
    "Anonymous": "Anonymous",

    /**
     * value: "Preparer"
     * @const
     */
    "Preparer": "Preparer",

    /**
     * value: "Participant"
     * @const
     */
    "Participant": "Participant"
};



export default StartedByInstance;

