/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSWorkflowDocGenDocOutputFormat from './DSWorkflowDocGenDocOutputFormat';
import StringOrVariableOrTransformation from './StringOrVariableOrTransformation';

/**
 * The DSDocGenStepInput model module.
 * @module model/DSDocGenStepInput
 * @version 1.0.0
 */
class DSDocGenStepInput {
    /**
     * Constructs a new <code>DSDocGenStepInput</code>.
     * @alias module:model/DSDocGenStepInput
     * @param outputFormat {module:model/DSWorkflowDocGenDocOutputFormat} 
     * @param outputFileNameIsUnique {Boolean} 
     * @param outputFileName {module:model/StringOrVariableOrTransformation} 
     * @param templateId {module:model/StringOrVariableOrTransformation} 
     * @param dataJson {Object.<String, module:model/StringOrVariableOrTransformation>} A Record of strings to Strings, Variables, or Transformation Expressions
     */
    constructor(outputFormat, outputFileNameIsUnique, outputFileName, templateId, dataJson) { 
        
        DSDocGenStepInput.initialize(this, outputFormat, outputFileNameIsUnique, outputFileName, templateId, dataJson);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outputFormat, outputFileNameIsUnique, outputFileName, templateId, dataJson) { 
        obj['outputFormat'] = outputFormat;
        obj['outputFileNameIsUnique'] = outputFileNameIsUnique;
        obj['outputFileName'] = outputFileName;
        obj['templateId'] = templateId;
        obj['dataJson'] = dataJson;
    }

    /**
     * Constructs a <code>DSDocGenStepInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DSDocGenStepInput} obj Optional instance to populate.
     * @return {module:model/DSDocGenStepInput} The populated <code>DSDocGenStepInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DSDocGenStepInput();

            if (data.hasOwnProperty('outputFormat')) {
                obj['outputFormat'] = DSWorkflowDocGenDocOutputFormat.constructFromObject(data['outputFormat']);
            }
            if (data.hasOwnProperty('outputFileNameIsUnique')) {
                obj['outputFileNameIsUnique'] = ApiClient.convertToType(data['outputFileNameIsUnique'], 'Boolean');
            }
            if (data.hasOwnProperty('outputFileName')) {
                obj['outputFileName'] = StringOrVariableOrTransformation.constructFromObject(data['outputFileName']);
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = StringOrVariableOrTransformation.constructFromObject(data['templateId']);
            }
            if (data.hasOwnProperty('dataJson')) {
                obj['dataJson'] = ApiClient.convertToType(data['dataJson'], {'String': StringOrVariableOrTransformation});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DSDocGenStepInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DSDocGenStepInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DSDocGenStepInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `outputFileName`
        if (data['outputFileName']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['outputFileName']);
        }
        // validate the optional field `templateId`
        if (data['templateId']) { // data not null
          StringOrVariableOrTransformation.validateJSON(data['templateId']);
        }

        return true;
    }


}

DSDocGenStepInput.RequiredProperties = ["outputFormat", "outputFileNameIsUnique", "outputFileName", "templateId", "dataJson"];

/**
 * @member {module:model/DSWorkflowDocGenDocOutputFormat} outputFormat
 */
DSDocGenStepInput.prototype['outputFormat'] = undefined;

/**
 * @member {Boolean} outputFileNameIsUnique
 */
DSDocGenStepInput.prototype['outputFileNameIsUnique'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} outputFileName
 */
DSDocGenStepInput.prototype['outputFileName'] = undefined;

/**
 * @member {module:model/StringOrVariableOrTransformation} templateId
 */
DSDocGenStepInput.prototype['templateId'] = undefined;

/**
 * A Record of strings to Strings, Variables, or Transformation Expressions
 * @member {Object.<String, module:model/StringOrVariableOrTransformation>} dataJson
 */
DSDocGenStepInput.prototype['dataJson'] = undefined;






export default DSDocGenStepInput;

