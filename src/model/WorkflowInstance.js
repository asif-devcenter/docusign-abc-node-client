/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProgressInstance from './ProgressInstance';
import StartedByInstance from './StartedByInstance';
import WorkflowInstanceState from './WorkflowInstanceState';

/**
 * The WorkflowInstance model module.
 * @module model/WorkflowInstance
 * @version 1.0.0
 */
class WorkflowInstance {
    /**
     * Constructs a new <code>WorkflowInstance</code>.
     * Details of a Workflow Instance triggered for a Workflow Definition
     * @alias module:model/WorkflowInstance
     * @param templateId {String} 
     * @param dacId {String} 
     * @param creatorId {String} 
     * @param users {Object.<String, String>} 
     * @param instanceState {module:model/WorkflowInstanceState} 
     */
    constructor(templateId, dacId, creatorId, users, instanceState) { 
        
        WorkflowInstance.initialize(this, templateId, dacId, creatorId, users, instanceState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, templateId, dacId, creatorId, users, instanceState) { 
        obj['templateId'] = templateId;
        obj['dacId'] = dacId;
        obj['creatorId'] = creatorId;
        obj['users'] = users;
        obj['instanceState'] = instanceState;
    }

    /**
     * Constructs a <code>WorkflowInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowInstance} obj Optional instance to populate.
     * @return {module:model/WorkflowInstance} The populated <code>WorkflowInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowInstance();

            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('instanceName')) {
                obj['instanceName'] = ApiClient.convertToType(data['instanceName'], 'String');
            }
            if (data.hasOwnProperty('dacId')) {
                obj['dacId'] = ApiClient.convertToType(data['dacId'], 'String');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], {'String': 'String'});
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('instanceState')) {
                obj['instanceState'] = WorkflowInstanceState.constructFromObject(data['instanceState']);
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('startedBy')) {
                obj['startedBy'] = StartedByInstance.constructFromObject(data['startedBy']);
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ProgressInstance.constructFromObject(data['progress']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }
        // ensure the json data is a string
        if (data['instanceName'] && !(typeof data['instanceName'] === 'string' || data['instanceName'] instanceof String)) {
            throw new Error("Expected the field `instanceName` to be a primitive type in the JSON string but got " + data['instanceName']);
        }
        // ensure the json data is a string
        if (data['dacId'] && !(typeof data['dacId'] === 'string' || data['dacId'] instanceof String)) {
            throw new Error("Expected the field `dacId` to be a primitive type in the JSON string but got " + data['dacId']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `startedBy`
        if (data['startedBy']) { // data not null
          StartedByInstance.validateJSON(data['startedBy']);
        }
        // validate the optional field `progress`
        if (data['progress']) { // data not null
          ProgressInstance.validateJSON(data['progress']);
        }

        return true;
    }


}

WorkflowInstance.RequiredProperties = ["templateId", "dacId", "creatorId", "users", "instanceState"];

/**
 * @member {String} templateId
 */
WorkflowInstance.prototype['templateId'] = undefined;

/**
 * The friendly name of the particular workflow instance
 * @member {String} instanceName
 */
WorkflowInstance.prototype['instanceName'] = undefined;

/**
 * @member {String} dacId
 */
WorkflowInstance.prototype['dacId'] = undefined;

/**
 * @member {String} creatorId
 */
WorkflowInstance.prototype['creatorId'] = undefined;

/**
 * @member {Object.<String, String>} users
 */
WorkflowInstance.prototype['users'] = undefined;

/**
 * @member {Date} startDate
 */
WorkflowInstance.prototype['startDate'] = undefined;

/**
 * @member {Date} endDate
 */
WorkflowInstance.prototype['endDate'] = undefined;

/**
 * @member {module:model/WorkflowInstanceState} instanceState
 */
WorkflowInstance.prototype['instanceState'] = undefined;

/**
 * @member {String} accountId
 */
WorkflowInstance.prototype['accountId'] = undefined;

/**
 * @member {module:model/StartedByInstance} startedBy
 */
WorkflowInstance.prototype['startedBy'] = undefined;

/**
 * @member {module:model/ProgressInstance} progress
 */
WorkflowInstance.prototype['progress'] = undefined;






export default WorkflowInstance;

