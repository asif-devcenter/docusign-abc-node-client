/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSWorkflowStep from './DSWorkflowStep';
import DSWorkflowTrigger from './DSWorkflowTrigger';
import DSWorkflowVariable from './DSWorkflowVariable';
import Participant from './Participant';

/**
 * The WorkflowDefinition model module.
 * @module model/WorkflowDefinition
 * @version 1.0.0
 */
class WorkflowDefinition {
    /**
     * Constructs a new <code>WorkflowDefinition</code>.
     * A DS workflow definition.
     * @alias module:model/WorkflowDefinition
     * @param workflowName {String} 
     * @param workflowDescription {String} 
     * @param documentVersion {String} 
     * @param schemaVersion {String} 
     * @param accountId {String} 
     * @param trigger {module:model/DSWorkflowTrigger} 
     * @param variables {Object.<String, module:model/DSWorkflowVariable>} A DS Workflow variable record
     * @param steps {Array.<module:model/DSWorkflowStep>} 
     */
    constructor(workflowName, workflowDescription, documentVersion, schemaVersion, accountId, trigger, variables, steps) { 
        
        WorkflowDefinition.initialize(this, workflowName, workflowDescription, documentVersion, schemaVersion, accountId, trigger, variables, steps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, workflowName, workflowDescription, documentVersion, schemaVersion, accountId, trigger, variables, steps) { 
        obj['workflowName'] = workflowName;
        obj['workflowDescription'] = workflowDescription;
        obj['documentVersion'] = documentVersion;
        obj['schemaVersion'] = schemaVersion;
        obj['accountId'] = accountId;
        obj['trigger'] = trigger;
        obj['variables'] = variables;
        obj['steps'] = steps;
    }

    /**
     * Constructs a <code>WorkflowDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowDefinition} obj Optional instance to populate.
     * @return {module:model/WorkflowDefinition} The populated <code>WorkflowDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowDefinition();

            if (data.hasOwnProperty('workflowName')) {
                obj['workflowName'] = ApiClient.convertToType(data['workflowName'], 'String');
            }
            if (data.hasOwnProperty('workflowDescription')) {
                obj['workflowDescription'] = ApiClient.convertToType(data['workflowDescription'], 'String');
            }
            if (data.hasOwnProperty('documentVersion')) {
                obj['documentVersion'] = ApiClient.convertToType(data['documentVersion'], 'String');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('createdByName')) {
                obj['createdByName'] = ApiClient.convertToType(data['createdByName'], 'String');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], {'String': Participant});
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = DSWorkflowTrigger.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], {'String': DSWorkflowVariable});
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], [DSWorkflowStep]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['workflowName'] && !(typeof data['workflowName'] === 'string' || data['workflowName'] instanceof String)) {
            throw new Error("Expected the field `workflowName` to be a primitive type in the JSON string but got " + data['workflowName']);
        }
        // ensure the json data is a string
        if (data['workflowDescription'] && !(typeof data['workflowDescription'] === 'string' || data['workflowDescription'] instanceof String)) {
            throw new Error("Expected the field `workflowDescription` to be a primitive type in the JSON string but got " + data['workflowDescription']);
        }
        // ensure the json data is a string
        if (data['documentVersion'] && !(typeof data['documentVersion'] === 'string' || data['documentVersion'] instanceof String)) {
            throw new Error("Expected the field `documentVersion` to be a primitive type in the JSON string but got " + data['documentVersion']);
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['createdByName'] && !(typeof data['createdByName'] === 'string' || data['createdByName'] instanceof String)) {
            throw new Error("Expected the field `createdByName` to be a primitive type in the JSON string but got " + data['createdByName']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          DSWorkflowTrigger.validateJSON(data['trigger']);
        }
        if (data['steps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['steps'])) {
                throw new Error("Expected the field `steps` to be an array in the JSON data but got " + data['steps']);
            }
            // validate the optional field `steps` (array)
            for (const item of data['steps']) {
                DSWorkflowStep.validateJSON(item);
            };
        }

        return true;
    }


}

WorkflowDefinition.RequiredProperties = ["workflowName", "workflowDescription", "documentVersion", "schemaVersion", "accountId", "trigger", "variables", "steps"];

/**
 * @member {String} workflowName
 */
WorkflowDefinition.prototype['workflowName'] = undefined;

/**
 * @member {String} workflowDescription
 */
WorkflowDefinition.prototype['workflowDescription'] = undefined;

/**
 * @member {String} documentVersion
 */
WorkflowDefinition.prototype['documentVersion'] = undefined;

/**
 * @member {String} schemaVersion
 */
WorkflowDefinition.prototype['schemaVersion'] = undefined;

/**
 * @member {String} accountId
 */
WorkflowDefinition.prototype['accountId'] = undefined;

/**
 * The name of the user who created this workflow definition
 * @member {String} createdByName
 */
WorkflowDefinition.prototype['createdByName'] = undefined;

/**
 * A DS Workflow participant record
 * @member {Object.<String, module:model/Participant>} participants
 */
WorkflowDefinition.prototype['participants'] = undefined;

/**
 * @member {module:model/DSWorkflowTrigger} trigger
 */
WorkflowDefinition.prototype['trigger'] = undefined;

/**
 * A DS Workflow variable record
 * @member {Object.<String, module:model/DSWorkflowVariable>} variables
 */
WorkflowDefinition.prototype['variables'] = undefined;

/**
 * @member {Array.<module:model/DSWorkflowStep>} steps
 */
WorkflowDefinition.prototype['steps'] = undefined;






export default WorkflowDefinition;

