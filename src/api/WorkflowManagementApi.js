/**
 * Workflows APIs
 * Workflows authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: aow@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeployRequest from '../model/DeployRequest';
import DeployResponse from '../model/DeployResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetConfigurationInstanceResponse from '../model/GetConfigurationInstanceResponse';
import GetConfigurationInstancesResponse from '../model/GetConfigurationInstancesResponse';
import InvalidWorkflowResponse from '../model/InvalidWorkflowResponse';
import NewOrUpdatedWorkflowDefinitionResponse from '../model/NewOrUpdatedWorkflowDefinitionResponse';
import SuccessMessageResponse from '../model/SuccessMessageResponse';
import WorkflowDefinition from '../model/WorkflowDefinition';
import WorkflowDefinitionList from '../model/WorkflowDefinitionList';
import WorkflowDefinitionWithId from '../model/WorkflowDefinitionWithId';
import WorkflowDeleteResponse from '../model/WorkflowDeleteResponse';
import WorkflowMetadataStatus from '../model/WorkflowMetadataStatus';
import WriteConfigurationInstanceRequest from '../model/WriteConfigurationInstanceRequest';
import WriteConfigurationInstancesRequest from '../model/WriteConfigurationInstancesRequest';

/**
* WorkflowManagement service.
* @module api/WorkflowManagementApi
* @version 1.0.0
*/
export default class WorkflowManagementApi {

    /**
    * Constructs a new WorkflowManagementApi. 
    * @alias module:api/WorkflowManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewWorkflowDefinition operation.
     * @callback module:api/WorkflowManagementApi~createNewWorkflowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewOrUpdatedWorkflowDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new workflow definition.
     * Creates a new workflow definition.
     * @param {String} accountId Account ID
     * @param {module:model/WorkflowDefinition} workflowDefinition Request Body to create a new workflow definition.
     * @param {module:api/WorkflowManagementApi~createNewWorkflowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewOrUpdatedWorkflowDefinitionResponse}
     */
    createNewWorkflowDefinition(accountId, workflowDefinition, callback) {
      let postBody = workflowDefinition;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createNewWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinition' is set
      if (workflowDefinition === undefined || workflowDefinition === null) {
        throw new Error("Missing the required parameter 'workflowDefinition' when calling createNewWorkflowDefinition");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewOrUpdatedWorkflowDefinitionResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigInstance operation.
     * @callback module:api/WorkflowManagementApi~deleteConfigInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes configuration instance
     * Deletes a configuration instance for a step in the workflow definition
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {String} stepId Workflow Definition Step ID
     * @param {module:api/WorkflowManagementApi~deleteConfigInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessageResponse}
     */
    deleteConfigInstance(accountId, workflowDefinitionId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteConfigInstance");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling deleteConfigInstance");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling deleteConfigInstance");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessMessageResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances/{stepId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfigInstances operation.
     * @callback module:api/WorkflowManagementApi~deleteConfigInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes configuration instances
     * Deletes configuration instances for a workflow definition
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:api/WorkflowManagementApi~deleteConfigInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessageResponse}
     */
    deleteConfigInstances(accountId, workflowDefinitionId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteConfigInstances");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling deleteConfigInstances");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessMessageResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkflowDefinition operation.
     * @callback module:api/WorkflowManagementApi~deleteWorkflowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow definition.
     * Deletes a workflow definition.
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:api/WorkflowManagementApi~deleteWorkflowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowDeleteResponse}
     */
    deleteWorkflowDefinition(accountId, workflowDefinitionId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling deleteWorkflowDefinition");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowDeleteResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigInstance operation.
     * @callback module:api/WorkflowManagementApi~getConfigInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration instance
     * Returns configuration instance for a step in the workflow definition
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {String} stepId Workflow Definition Step ID
     * @param {module:api/WorkflowManagementApi~getConfigInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationInstanceResponse}
     */
    getConfigInstance(accountId, workflowDefinitionId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConfigInstance");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling getConfigInstance");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling getConfigInstance");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationInstanceResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances/{stepId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigInstances operation.
     * @callback module:api/WorkflowManagementApi~getConfigInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfigurationInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets configuration instances
     * Returns a list of configuration instances for a workflow definition
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:api/WorkflowManagementApi~getConfigInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfigurationInstancesResponse}
     */
    getConfigInstances(accountId, workflowDefinitionId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getConfigInstances");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling getConfigInstances");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfigurationInstancesResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowDefinition operation.
     * @callback module:api/WorkflowManagementApi~getWorkflowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowDefinitionWithId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workflow Definition
     * Returns a workflow definition.
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {Object} opts Optional parameters
     * @param {String} [lastDeployedId] deployed workflow definition metadata object id
     * @param {module:api/WorkflowManagementApi~getWorkflowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowDefinitionWithId}
     */
    getWorkflowDefinition(accountId, workflowDefinitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling getWorkflowDefinition");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
        'lastDeployedId': opts['lastDeployedId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowDefinitionWithId;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkflowDefinitions operation.
     * @callback module:api/WorkflowManagementApi~getWorkflowDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workflow Definitions metadata
     * Returns a list of workflow definitions' metadata.
     * @param {String} accountId Account ID
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkflowMetadataStatus} [status] workflow definition metadata status
     * @param {module:api/WorkflowManagementApi~getWorkflowDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowDefinitionList}
     */
    getWorkflowDefinitions(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getWorkflowDefinitions");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowDefinitionList;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishOrUnPublishWorkflowDefinition operation.
     * @callback module:api/WorkflowManagementApi~publishOrUnPublishWorkflowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes or unpublishes a workflow definition.
     * Publishes or unpublishes a workflow definition.
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:model/DeployRequest} deployRequest Request Body to publish or unpublish a workflow definition.
     * @param {module:api/WorkflowManagementApi~publishOrUnPublishWorkflowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployResponse}
     */
    publishOrUnPublishWorkflowDefinition(accountId, workflowDefinitionId, deployRequest, callback) {
      let postBody = deployRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling publishOrUnPublishWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling publishOrUnPublishWorkflowDefinition");
      }
      // verify the required parameter 'deployRequest' is set
      if (deployRequest === undefined || deployRequest === null) {
        throw new Error("Missing the required parameter 'deployRequest' when calling publishOrUnPublishWorkflowDefinition");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeployResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkflowDefinition operation.
     * @callback module:api/WorkflowManagementApi~updateWorkflowDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewOrUpdatedWorkflowDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a workflow definition.
     * Updates a workflow definition.
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:model/WorkflowDefinition} workflowDefinition Request Body to update a workflow definition.
     * @param {module:api/WorkflowManagementApi~updateWorkflowDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewOrUpdatedWorkflowDefinitionResponse}
     */
    updateWorkflowDefinition(accountId, workflowDefinitionId, workflowDefinition, callback) {
      let postBody = workflowDefinition;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling updateWorkflowDefinition");
      }
      // verify the required parameter 'workflowDefinition' is set
      if (workflowDefinition === undefined || workflowDefinition === null) {
        throw new Error("Missing the required parameter 'workflowDefinition' when calling updateWorkflowDefinition");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewOrUpdatedWorkflowDefinitionResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeConfigInstance operation.
     * @callback module:api/WorkflowManagementApi~writeConfigInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates/updates a configuration instance
     * Creates/updates a configuration instances for a step in the workflow definition
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {String} stepId Workflow Definition Step ID
     * @param {module:model/WriteConfigurationInstanceRequest} writeConfigurationInstanceRequest Request body to create/update a configuration instance
     * @param {module:api/WorkflowManagementApi~writeConfigInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessageResponse}
     */
    writeConfigInstance(accountId, workflowDefinitionId, stepId, writeConfigurationInstanceRequest, callback) {
      let postBody = writeConfigurationInstanceRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling writeConfigInstance");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling writeConfigInstance");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling writeConfigInstance");
      }
      // verify the required parameter 'writeConfigurationInstanceRequest' is set
      if (writeConfigurationInstanceRequest === undefined || writeConfigurationInstanceRequest === null) {
        throw new Error("Missing the required parameter 'writeConfigurationInstanceRequest' when calling writeConfigInstance");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId,
        'stepId': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessMessageResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances/{stepId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the writeConfigInstances operation.
     * @callback module:api/WorkflowManagementApi~writeConfigInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates/updates configuration instances
     * Creates/updates configuration instances for a workflow definition. It will overwrite the existing configuration instances with the provided configuration instances.
     * @param {String} accountId Account ID
     * @param {String} workflowDefinitionId Workflow Definition ID
     * @param {module:model/WriteConfigurationInstancesRequest} writeConfigurationInstancesRequest Request body to create/update configuration instances
     * @param {module:api/WorkflowManagementApi~writeConfigInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessMessageResponse}
     */
    writeConfigInstances(accountId, workflowDefinitionId, writeConfigurationInstancesRequest, callback) {
      let postBody = writeConfigurationInstancesRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling writeConfigInstances");
      }
      // verify the required parameter 'workflowDefinitionId' is set
      if (workflowDefinitionId === undefined || workflowDefinitionId === null) {
        throw new Error("Missing the required parameter 'workflowDefinitionId' when calling writeConfigInstances");
      }
      // verify the required parameter 'writeConfigurationInstancesRequest' is set
      if (writeConfigurationInstancesRequest === undefined || writeConfigurationInstancesRequest === null) {
        throw new Error("Missing the required parameter 'writeConfigurationInstancesRequest' when calling writeConfigInstances");
      }

      let pathParams = {
        'accountId': accountId,
        'workflowDefinitionId': workflowDefinitionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['docusignAccessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessMessageResponse;
      return this.apiClient.callApi(
        '/management/accounts/{accountId}/workflowDefinitions/{workflowDefinitionId}/configInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
